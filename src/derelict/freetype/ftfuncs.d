/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.freetype.ftfuncs;

private
{
    import derelict.util.compat;
    import derelict.freetype.fttypes;
}

extern(C)
{
    mixin(gsharedString!() ~
    "
    FT_Error function(FT_Library *alibrary) FT_Init_FreeType;
    FT_Error function(FT_Library library) FT_Done_FreeType;
    FT_Error function(FT_Library library, CCPTR filepathname, FT_Long face_index, FT_Face *aface) FT_New_Face;
    FT_Error function(FT_Library library, in FT_Byte* file_base, FT_Long file_size, FT_Long face_index, FT_Face *aface) FT_New_Memory_Face;
    FT_Error function(FT_Library library, in FT_Open_Args* args, FT_Long face_index, FT_Face *aface) FT_Open_Face;
    FT_Error function(FT_Face face, CCPTR filepathname) FT_Attach_File;
    FT_Error function(FT_Face face, FT_Open_Args* parameters) FT_Attach_Stream;
    FT_Error function(FT_Face face) FT_Reference_Face;
    FT_Error function(FT_Face face) FT_Done_Face;
    FT_Error function(FT_Face face, FT_Int strike_index) FT_Select_Size;
    FT_Error function(FT_Face face, FT_Size_Request req) FT_Request_Size;
    FT_Error function(FT_Face face, FT_F26Dot6 char_width, FT_F26Dot6 char_height, FT_UInt horz_resolution, FT_UInt vert_resolution) FT_Set_Char_Size;
    FT_Error function(FT_Face face, FT_UInt pixel_width, FT_UInt pixel_height) FT_Set_Pixel_Sizes;
    FT_Error function(FT_Face face, FT_UInt glyph_index, FT_Int32 load_flags) FT_Load_Glyph;
    FT_Error function(FT_Face face, FT_ULong char_code, FT_Int32 load_flags) FT_Load_Char;
    void function(FT_Face face, FT_Matrix* matrix, FT_Vector* delta) FT_Set_Transform;
    FT_Error function(FT_GlyphSlot slot, FT_Render_Mode render_mode) FT_Render_Glyph;
    FT_Error function(FT_Face face, FT_UInt left_glyph, FT_UInt right_glyph, FT_UInt kern_mode, FT_Vector *akerning) FT_Get_Kerning;
    FT_Error function(FT_Face face, FT_Fixed point_size, FT_Int degree, FT_Fixed* akerning) FT_Get_Track_Kerning;
    FT_Error function(FT_Face face, FT_UInt glyph_index, FT_Pointer buffer, FT_UInt buffer_max) FT_Get_Glyph_Name;
    CCPTR function(FT_Face face) FT_Get_Postscript_Name;
    FT_Error function(FT_Face face, FT_Encoding encoding) FT_Select_Charmap;
    FT_Error function(FT_Face face, FT_CharMap charmap) FT_Set_Charmap;
    FT_Int function(FT_CharMap charmap) FT_Get_Charmap_Index;
    FT_UInt function(FT_Face face, FT_ULong charcode) FT_Get_Char_Index;
    FT_ULong function(FT_Face face, FT_UInt *agindex) FT_Get_First_Char;
    FT_ULong function(FT_Face face, FT_ULong char_code, FT_UInt *agindex) FT_Get_Next_Char;
    FT_UInt function(FT_Face face, FT_String* glyph_name) FT_Get_Name_Index;
    FT_Long function(FT_Long a, FT_Long b, FT_Long c) FT_MulDiv;
    FT_Long function(FT_Long a, FT_Long b) FT_MulFix;
    FT_Long function(FT_Long a, FT_Long b) FT_DivFix;
    FT_Fixed function(FT_Fixed a) FT_RoundFix;
    FT_Fixed function(FT_Fixed a) FT_CeilFix;
    FT_Fixed function(FT_Fixed a) FT_FloorFix;
    void function(FT_Vector* vec, FT_Matrix* matrix) FT_Vector_Transform;
    void function(FT_Library library, FT_Int *amajor, FT_Int *aminor, FT_Int *apatch) FT_Library_Version;
    FT_Bool function(FT_Face face) FT_Face_CheckTrueTypePatents;
    FT_Bool function(FT_Face face, FT_Bool value) FT_Face_SetUnpatentedHinting;

    // ftlist.h
    FT_ListNode function(FT_List list, void* data) FT_List_Find;
    void function(FT_List list, FT_ListNode node) FT_List_Add;
    void function(FT_List list, FT_ListNode node) FT_List_Insert;
    void function(FT_List list, FT_ListNode node) FT_List_Remove;
    void function(FT_List list, FT_ListNode node) FT_List_Up;
    FT_Error function(FT_List list, FT_List_Iterator iterator, void* user) FT_List_Iterate;
    void function(FT_List list, FT_List_Destructor destroy, FT_Memory memory, void* user) FT_List_Finalize;

    // ftoutln.h
    FT_Error function(FT_Outline* outline, in FT_Outline_Funcs* func_interface, void* user) FT_Outline_Decompose;
    FT_Error function(FT_Library library, FT_UInt numPoints, FT_Int numContours, FT_Outline *anoutline) FT_Outline_New;
    FT_Error function(FT_Memory memory, FT_UInt numPoints, FT_Int numContours, FT_Outline *anoutline) FT_Outline_New_Internal;
    FT_Error function(FT_Library library, FT_Outline* outline) FT_Outline_Done;
    FT_Error function(FT_Memory memory, FT_Outline* outline) FT_Outline_Done_Internal;
    FT_Error function(FT_Outline* outline) FT_Outline_Check;
    void function(in FT_Outline* outline, FT_BBox *acbox) FT_Outline_Get_CBox;
    void function(in FT_Outline* outline, FT_Pos xOffset, FT_Pos yOffset) FT_Outline_Translate;
    FT_Error function(in FT_Outline* source, FT_Outline *target) FT_Outline_Copy;
    void function(in FT_Outline* outline, in FT_Matrix* matrix) FT_Outline_Transform;
    FT_Error function(FT_Outline* outline, FT_Pos strength) FT_Outline_Embolden;
    void function(FT_Outline* outline) FT_Outline_Reverse;
    FT_Error function(FT_Library library, FT_Outline* outline, in FT_Bitmap *abitmap) FT_Outline_Get_Bitmap;
    FT_Error function(FT_Library library, FT_Outline* outline, FT_Raster_Params* params) FT_Outline_Render;
    FT_Orientation function(FT_Outline* outline) FT_Outline_Get_Orientation;

    // ftsizes.h
    FT_Error function(FT_Face face, FT_Size* size) FT_New_Size;
    FT_Error function(FT_Size size) FT_Done_Size;
    FT_Error function(FT_Size size) FT_Activate_Size;

    // ftmodapi.h
    FT_Error function(FT_Library library, in FT_Module_Class* clazz) FT_Add_Module;
    FT_Module function(FT_Library library, CCPTR module_name) FT_Get_Module;
    FT_Error function(FT_Library library, FT_Module mod) FT_Remove_Module;
    FT_Error function(FT_Library library) FT_Reference_Library;
    FT_Error function(FT_Memory memory, FT_Library *alibrary) FT_New_Library;
    FT_Error function(FT_Library library) FT_Done_Library;
    void function(FT_Library library, FT_UInt hook_index, FT_DebugHook_Func debug_hook) FT_Set_Debug_Hook;
    void function(FT_Library library) FT_Add_Default_Modules;
    FT_TrueTypeEngineType function(FT_Library library) FT_Get_TrueType_Engine_Type;

    // ftrender.h
    FT_Renderer function(FT_Library library, FT_Glyph_Format format) FT_Get_Renderer;
    FT_Error function(FT_Library library, FT_Renderer renderer, FT_UInt num_params, FT_Parameter* parameters) FT_Set_Renderer;

    // t1tables.h
    FT_Int function(FT_Face face) FT_Has_PS_Glyph_Names;
    FT_Error function(FT_Face face, PS_FontInfoRec *afont_info) FT_Get_PS_Font_Info;
    FT_Error function(FT_Face face, PS_PrivateRec *afont_private) FT_Get_PS_Font_Private;

    // tttables.h
    void* function(FT_Face face, FT_Sfnt_Tag tag) FT_Get_Sfnt_Table;
    FT_Error function(FT_Face face, FT_ULong tag, FT_Long offset, FT_Byte* buffer, FT_ULong* length) FT_Load_Sfnt_Table;
    FT_Error function(FT_Face face, FT_UInt table_index, FT_ULong *tag, FT_ULong *length) FT_Sfnt_Table_Info;
    FT_ULong function(FT_CharMap charmap) FT_Get_CMap_Language_ID;
    FT_ULong function(FT_CharMap charmap) FT_Get_CMap_Format;

    // ftbdf.h
    FT_Error function(FT_Face face, CCPTR* acharset_encoding, CCPTR* acharset_registry) FT_Get_BDF_Charset_ID;
    FT_Error function(FT_Face face, CCPTR prop_name, BDF_PropertyRec *aproperty) FT_Get_BDF_Property;

    // ftgzip.h
    FT_Error function(FT_Stream stream, FT_Stream source) FT_Stream_OpenGzip;

    // ftlzw.h
    FT_Error function(FT_Stream stream, FT_Stream source) FT_Stream_OpenLZW;

    // ftwinfnt.h
    FT_Error function(FT_Face face, FT_WinFNT_HeaderRec *aheader) FT_Get_WinFNT_Header;

    // ftglyph.h
    FT_Error function(FT_GlyphSlot slot, FT_Glyph *aglyph) FT_Get_Glyph;
    FT_Error function(FT_Glyph source, FT_Glyph *target) FT_Glyph_Copy;
    FT_Error function(FT_Glyph glyph, FT_Matrix* matrix, FT_Vector* delta) FT_Glyph_Transform;
    void function(FT_Glyph glyph, FT_UInt bbox_mode, FT_BBox *acbox) FT_Glyph_Get_CBox;
    FT_Error function(FT_Glyph* the_glyph, FT_Render_Mode render_mode, FT_Vector* origin, FT_Bool destroy) FT_Glyph_To_Bitmap;
    void function(FT_Glyph glyph) FT_Done_Glyph;
    void function(in FT_Matrix* a, FT_Matrix* b) FT_Matrix_Multiply;
    FT_Error function(FT_Matrix* matrix) FT_Matrix_Invert;

    // ftbitmap.h
    void function(FT_Bitmap *abitmap) FT_Bitmap_New;
    FT_Error function(FT_Library library, in FT_Bitmap *source, FT_Bitmap *target) FT_Bitmap_Copy;
    FT_Error function(FT_Library library, FT_Bitmap* bitmap, FT_Pos xStrength, FT_Pos yStrength) FT_Bitmap_Embolden;
    FT_Error function(FT_Library library, in FT_Bitmap *source, FT_Bitmap *target, FT_Int alignment) FT_Bitmap_Convert;
    FT_Error function(FT_Library library, FT_Bitmap *bitmap) FT_Bitmap_Done;

    // ftbbox.h
    FT_Error function(FT_Outline* outline, FT_BBox *abbox) FT_Outline_Get_BBox;

    // ftcache.h
    FT_Error function(FT_Library library, FT_UInt max_faces, FT_UInt max_sizes, FT_ULong max_bytes, FTC_Face_Requester requester, FT_Pointer req_data, FTC_Manager *amanager) FTC_Manager_New;
    void function(FTC_Manager manager) FTC_Manager_Reset;
    void function(FTC_Manager manager) FTC_Manager_Done;
    FT_Error function(FTC_Manager manager, FTC_FaceID face_id, FT_Face *aface) FTC_Manager_LookupFace;
    FT_Error function(FTC_Manager manager, FTC_Scaler scaler, FT_Size *asize) FTC_Manager_LookupSize;
    void function(FTC_Node node, FTC_Manager manager) FTC_Node_Unref;
    void function(FTC_Manager manager, FTC_FaceID face_id) FTC_Manager_RemoveFaceID;
    FT_Error function(FTC_Manager manager, FTC_CMapCache *acache) FTC_CMapCache_New;
    FT_UInt function(FTC_CMapCache cache, FTC_FaceID face_id, FT_Int cmap_index, FT_UInt32 char_code) FTC_CMapCache_Lookup;
    FT_Error function(FTC_Manager manager, FTC_ImageCache *acache) FTC_ImageCache_New;
    FT_Error function(FTC_ImageCache cache, FTC_ImageType type, FT_UInt gindex, FT_Glyph *aglyph, FTC_Node *anode) FTC_ImageCache_Lookup;
    FT_Error function(FTC_ImageCache cache, FTC_Scaler scaler, FT_ULong load_flags, FT_UInt gindex, FT_Glyph *aglyph, FTC_Node *anode) FTC_ImageCache_LookupScaler;
    FT_Error function(FTC_Manager manager, FTC_SBitCache *acache) FTC_SBitCache_New;
    FT_Error function(FTC_SBitCache cache, FTC_ImageType type, FT_UInt gindex, FTC_SBit *sbit, FTC_Node *anode) FTC_SBitCache_Lookup;
    FT_Error function(FTC_SBitCache cache, FTC_Scaler scaler, FT_ULong load_flags, FT_UInt gindex, FTC_SBit *sbit,FTC_Node *anode) FTC_SBitCache_LookupScaler;

    // ftmm.h
    FT_Error function(FT_Face face, FT_Multi_Master *amaster) FT_Get_Multi_Master;
    FT_Error function(FT_Face face, FT_MM_Var* *amaster) FT_Get_MM_Var;
    FT_Error function(FT_Face face, FT_UInt num_coords, FT_Long* coords) FT_Set_MM_Design_Coordinates;
    FT_Error function(FT_Face face, FT_UInt num_coords, FT_Fixed* coords) FT_Set_Var_Design_Coordinates;
    FT_Error function(FT_Face face, FT_UInt num_coords, FT_Fixed* coords) FT_Set_MM_Blend_Coordinates;
    FT_Error function(FT_Face face, FT_UInt num_coords, FT_Fixed* coords) FT_Set_Var_Blend_Coordinates;

    // ftsnames.h
    FT_UInt function(FT_Face face) FT_Get_Sfnt_Name_Count;
    FT_Error function(FT_Face face, FT_UInt idx, FT_SfntName *aname) FT_Get_Sfnt_Name;

    // ftotval.h
    FT_Error function(FT_Face face, FT_UInt validation_flags, FT_Bytes *BASE_table, FT_Bytes *GDEF_table, FT_Bytes *GPOS_table, FT_Bytes *GSUB_table, FT_Bytes *JSTF_table) FT_OpenType_Validate;
    void function (FT_Face face, FT_Bytes table) FT_OpenType_Free;

    // ftgxval.h
    FT_Error function(FT_Face face, FT_UInt validation_flags, FT_Bytes tables[FT_VALIDATE_GX_LENGTH], FT_UInt table_length) FT_TrueTypeGX_Validate;
    void function(FT_Face face, FT_Bytes table) FT_TrueTypeGX_Free;
    FT_Error function(FT_Face face, FT_UInt validation_flags, FT_Bytes *ckern_table) FT_ClassicKern_Validate;
    void function(FT_Face face, FT_Bytes table) FT_ClassicKern_Free;

    // ftpfr
    FT_Error function(FT_Face face, FT_UInt *aoutline_resolution, FT_UInt *ametrics_resolution, FT_Fixed *ametrics_x_scale, FT_Fixed *ametrics_y_scale) FT_Get_PFR_Metrics;
    FT_Error function(FT_Face face, FT_UInt left, FT_UInt right, FT_Vector *avector) FT_Get_PFR_Kerning;
    FT_Error function(FT_Face face, FT_UInt gindex, FT_Pos *aadvance) FT_Get_PFR_Advance;

    // ftstroke.h
    FT_StrokerBorder function(FT_Outline* outline) FT_Outline_GetInsideBorder;
    FT_StrokerBorder function(FT_Outline* outline) FT_Outline_GetOutsideBorder;
    FT_Error function(FT_Memory memory, FT_Stroker *astroker) FT_Stroker_New;
    void function(FT_Stroker stroker, FT_Fixed radius, FT_Stroker_LineCap line_cap, FT_Stroker_LineJoin line_join, FT_Fixed miter_limit) FT_Stroker_Set;
    void function(FT_Stroker stroker) FT_Stroker_Rewind;
    FT_Error function(FT_Stroker stroker, FT_Outline* outline, FT_Bool opened) FT_Stroker_ParseOutline;
    FT_Error function(FT_Stroker stroker, FT_Vector* to, FT_Bool open) FT_Stroker_BeginSubPath;
    FT_Error function(FT_Stroker stroker) FT_Stroker_EndSubPath;
    FT_Error function(FT_Stroker stroker, FT_Vector* to) FT_Stroker_LineTo;
    FT_Error function(FT_Stroker stroker, FT_Vector* control, FT_Vector* to) FT_Stroker_ConicTo;
    FT_Error function(FT_Stroker stroker, FT_Vector* control1, FT_Vector* control2, FT_Vector* to) FT_Stroker_CubicTo;
    FT_Error function(FT_Stroker stroker, FT_StrokerBorder border, FT_UInt *anum_points, FT_UInt *anum_contours) FT_Stroker_GetBorderCounts;
    void function(FT_Stroker stroker, FT_StrokerBorder border, FT_Outline* outline) FT_Stroker_ExportBorder;
    FT_Error function(FT_Stroker stroker, FT_UInt *anum_points, FT_UInt *anum_contours) FT_Stroker_GetCounts;
    void function(FT_Stroker stroker, FT_Outline* outline) FT_Stroker_Export;
    void function(FT_Stroker stroker) FT_Stroker_Done;
    FT_Error function(FT_Glyph *pglyph, FT_Stroker stroker, FT_Bool destroy) FT_Glyph_Stroke;
    FT_Error function(FT_Glyph *pglyph, FT_Stroker stroker, FT_Bool inside, FT_Bool destroy) FT_Glyph_StrokeBorder;

    // ftsynth.h
    FT_Error function(FT_GlyphSlot slot) FT_GlyphSlot_Own_Bitmap;
    void function(FT_GlyphSlot slot) FT_GlyphSlot_Embolden;
    void function(FT_GlyphSlot slot) FT_GlyphSlot_Oblique;

    // ftxf86.h
    CCPTR function(FT_Face face) FT_Get_X11_Font_Format;

    // fttrigon.h
    FT_Fixed function(FT_Angle angle) FT_Sin;
    FT_Fixed function(FT_Angle angle) FT_Cos;
    FT_Fixed function(FT_Angle angle) FT_Tan;
    FT_Angle function(FT_Fixed x,FT_Fixed y) FT_Atan2;
    FT_Angle function(FT_Angle angle1, FT_Angle angle2) FT_Angle_Diff;
    void function(FT_Vector* vec, FT_Angle angle) FT_Vector_Unit;
    void function(FT_Vector* vec, FT_Angle angle) FT_Vector_Rotate;
    FT_Fixed function(FT_Vector* vec) FT_Vector_Length;
    void function(FT_Vector* vec, FT_Fixed *length, FT_Angle *angle) FT_Vector_Polarize;
    void function(FT_Vector* vec, FT_Fixed length, FT_Angle angle) FT_Vector_From_Polar;

    // ftlcdfil.h
    FT_Error function(FT_Library library, FT_LcdFilter filter) FT_Library_SetLcdFilter;
    FT_Error function(FT_Library library, ubyte* weights) FT_Library_SetLcdFilterWeights;

    // ftgasp.h
    FT_Int function(FT_Face face, FT_UInt ppem) FT_Get_Gasp;

    /+ other
    FT_Error function(FT_Memory memory, FT_Long size, void* *P) FT_Alloc;
    FT_Error function(FT_Memory memory, FT_Long size, void* *p) FT_QAlloc;
    FT_Error function(FT_Memory memory, FT_Long current, FT_Long size, void* *P) FT_Realloc;
    FT_Error function(FT_Memory memory, FT_Long current, FT_Long size, void* *p) FT_QRealloc;
    void function(FT_Memory memory, void* *P) FT_Free;
    FT_Error function(FT_Memory memory, FT_GlyphLoader *aloader) FT_GlyphLoader_New;
    FT_Error function(FT_GlyphLoader loader) FT_GlyphLoader_CreateExtra;
    void function(FT_GlyphLoader loader) FT_GlyphLoader_Done;
    void function(FT_GlyphLoader loader) FT_GlyphLoader_Reset;
    void function(FT_GlyphLoader loader) FT_GlyphLoader_Rewind;
    FT_Error function(FT_GlyphLoader loader, FT_UInt n_points, FT_UInt n_contours) FT_GlyphLoader_CheckPoints;
    FT_Error function(FT_GlyphLoader loader, FT_UInt n_subs) FT_GlyphLoader_CheckSubGlyphs;
    void function(FT_GlyphLoader loader) FT_GlyphLoader_Prepare;
    void function(FT_GlyphLoader loader) FT_GlyphLoader_Add;
    FT_Error function(FT_GlyphLoader target, FT_GlyphLoader source) FT_GlyphLoader_CopyPoints;
    FT_Pointer function(FT_ServiceDesc service_descriptors, CCPTR service_id) FT_service_list_lookup;
    FT_Error function(FT_CMap_Class clazz, FT_Pointer init_data, FT_CharMap charmap, FT_CMap *acmap) FT_CMap_New;
    void function(FT_CMap cmap) FT_CMap_Done;
    CVPTR function(FT_Library library, CCPTR mod_name) FT_Get_Module_Interface;
    FT_Pointer function(FT_Module mod, CCPTR service_id) FT_module_get_service;
    FT_Error function(FT_Face face, FT_GlyphSlot *aslot) FT_New_GlyphSlot;
    void function(FT_GlyphSlot slot) FT_Done_GlyphSlot;
    void function(FT_GlyphSlot slot) FT_glyphslot_free_bitmap;
    FT_Error function(FT_GlyphSlot slot, FT_ULong size) FT_glyphslot_alloc_bitmap;
    void function(FT_GlyphSlot slot, FT_Byte* buffer) FT_glyphslot_set_bitmap;
    FT_Renderer function(FT_Library library, FT_Glyph_Format format, FT_ListNode* node) FT_Lookup_Renderer;
    FT_Error function(FT_Library library, FT_GlyphSlot slot, FT_Render_Mode render_mode) FT_Render_Glyph_Internal;
    FT_Memory function() FT_New_Memory;
    void function(FT_Memory memory) FT_Done_Memory;
    FT_Error function(FT_Stream stream, CCPTR filepathname) FT_Stream_Open;
    FT_Error function(FT_Library library, in FT_Open_Args* args, FT_Stream *astream) FT_Stream_New;
    void function(FT_Stream stream, FT_Int external) FT_Stream_Free;
    void function(FT_Stream stream, in FT_Byte* base, FT_ULong size) FT_Stream_OpenMemory;
    void function(FT_Stream stream) FT_Stream_Close;
    FT_Error function(FT_Stream stream, FT_ULong pos) FT_Stream_Seek;
    FT_Error function(FT_Stream stream, FT_Long distance) FT_Stream_Skip;
    FT_Long function(FT_Stream stream) FT_Stream_Pos;
    FT_Error function(FT_Stream stream, FT_Byte* buffer, FT_ULong count) FT_Stream_Read;
    FT_Error function(FT_Stream stream, FT_ULong pos, FT_Byte* buffer, FT_ULong count) FT_Stream_ReadAt;
    FT_ULong function(FT_Stream stream, FT_Byte* buffer, FT_ULong count) FT_Stream_TryRead;
    FT_Error function(FT_Stream stream, FT_ULong count) FT_Stream_EnterFrame;
    void function(FT_Stream stream) FT_Stream_ExitFrame;
    FT_Error function(FT_Stream stream, FT_ULong count, FT_Byte** pbytes) FT_Stream_ExtractFrame;
    void function(FT_Stream stream, FT_Byte** pbytes) FT_Stream_ReleaseFrame;
    FT_Char function(FT_Stream stream) FT_Stream_GetChar;
    FT_Short function(FT_Stream stream) FT_Stream_GetShort;
    FT_Long function(FT_Stream stream) FT_Stream_GetOffset;
    FT_Long function(FT_Stream stream) FT_Stream_GetLong;
    FT_Short function(FT_Stream stream) FT_Stream_GetShortLE;
    FT_Long function(FT_Stream stream) FT_Stream_GetLongLE;
    FT_Char function(FT_Stream stream, FT_Error* error) FT_Stream_ReadChar;
    FT_Short function(FT_Stream stream, FT_Error* error) FT_Stream_ReadShort;
    FT_Long function(FT_Stream stream, FT_Error* error) FT_Stream_ReadOffset;
    FT_Long function(FT_Stream stream, FT_Error* error) FT_Stream_ReadLong;
    FT_Short function(FT_Stream stream, FT_Error* error) FT_Stream_ReadShortLE;
    FT_Long function(FT_Stream stream, FT_Error* error) FT_Stream_ReadLongLE;
    FT_Error function(FT_Stream stream, in FT_Frame_Field* fields, void* structure) FT_Stream_ReadFields;
    FT_Int function() FT_Trace_Get_Count;
    CCPTR function(FT_Int idx) FT_Trace_Get_Name;
    void function() FT_debug_init;
    FT_Int32 function(FT_Int32 x) FT_SqrtFixed;
    void function(FT_Library library, FT_Stream stream, char* base_name, char** new_names, FT_Long* offsets, FT_Error* errors) FT_Raccess_Guess;
    FT_Error function(FT_Library library, FT_Stream stream, FT_Long rfork_offset, FT_Long *map_offset, FT_Long *rdata_pos) FT_Raccess_Get_HeaderInfo;
    FT_Error function(FT_Library library, FT_Stream stream, FT_Long map_offset, FT_Long rdata_pos, FT_Long tag, FT_Long **offsets, FT_Long *count) FT_Raccess_Get_DataOffsets;
    void function(FT_Validator valid, in FT_Byte* base, in FT_Byte* limit, FT_ValidationLevel level) FT_validator_init;
    FT_Int function(FT_Validator valid) FT_validator_run;
    void function(FT_Validator valid, FT_Error error) FT_validator_error;
    +/
    ");
}